{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","userType","BehaviorSubject","authData","userData","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","value","name","undefined","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","additionalData","next","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","pipe","share","subscribe","res","data","signInOAuth","oAuthType","registration_token","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","Error","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","error","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","headers","accessToken","client","expiry","tokenType","uid","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","authWindow","pollerObserv","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","bind","pollerSubscription","closed","unsubscribe","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","tokenOptions","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"siBAEA,IAAaA,EAAwB,IAAIC,EAAAA,eAAe,yBCFxDC,EAAA,WAmEE,SAAAA,EACUC,EACuBC,EACFC,EACTC,EACAC,GAJZC,KAAAL,KAAAA,EAEqBK,KAAAH,WAAAA,EACTG,KAAAF,eAAAA,EACAE,KAAAD,OAAAA,EAZfC,KAAAC,SAAsC,IAAIC,EAAAA,gBAA0B,MACpEF,KAAAG,SAAsC,IAAID,EAAAA,gBAA0B,MACpEF,KAAAI,SAAsC,IAAIF,EAAAA,gBAA0B,MAGnEF,KAAAK,aAA8B,GASpCL,KAAKM,OAA4B,oBAAXC,OAA0BA,OAAS,GAErDC,EAAAA,iBAAiBR,KAAKH,aAGxBG,KAAKM,OAAS,CACZG,KAAM,WAAY,OAAA,MAClBC,SAAU,CACRC,KAAM,IACNC,OAAQ,MAKZZ,KAAKK,aAAaQ,QAAU,WAAY,OAAA,MACxCb,KAAKK,aAAaS,QAAU,WAAY,OAAA,MACxCd,KAAKK,aAAaU,WAAa,WAAY,OAAA,OAE3Cf,KAAKK,aAAeA,iBAGhBW,EAAsC,CAC1CC,QAA4B,KAC5BC,QAA4B,KAE5BC,WAA4B,eAC5BC,eAA4B,KAC5BC,0BAA4B,KAE5BC,YAA4B,gBAC5BC,kBAA4B,sBAC5BC,uBAA4B,EAE5BC,oBAA4B,OAC5BC,kBAA4B,OAC5BC,wBAA4B3B,KAAKM,OAAOI,SAASC,KAEjDiB,mBAA4B,OAE5BC,kBAA4B,gBAC5BC,sBAA4B9B,KAAKM,OAAOI,SAASC,KAEjDoB,UAA4B,KAC5BC,WAA4B,QAE5BC,UAA4BjC,KAAKM,OAAOI,SAASE,OACjDsB,WAAY,CACVC,OAA0B,eAE5BC,kBAA4B,iBAC5BC,gBAA4B,YAC5BC,mBAA4B,MAGxBC,EAAgB,OAAcC,OAAOxB,EAAgBpB,GAC3DI,KAAKyC,QAAUF,EAEc,OAAzBvC,KAAKyC,QAAQvB,SACfwB,QAAQC,KAAK,gLAIf3C,KAAK4C,yBA3GPC,OAAAC,eAAIpD,EAAAqD,UAAA,kBAAe,KAAnB,WACE,OAA2B,MAAvB/C,KAAKC,SAAS+C,MACThD,KAAKC,SAAS+C,MAAMC,KAEpBC,2CAIXL,OAAAC,eAAIpD,EAAAqD,UAAA,kBAAe,KAAnB,WACE,OAAO/C,KAAKI,SAAS4C,uCAGvBH,OAAAC,eAAIpD,EAAAqD,UAAA,kBAAe,KAAnB,WACE,OAAO/C,KAAKG,SAAS6C,uCAGvBH,OAAAC,eAAIpD,EAAAqD,UAAA,UAAO,KAAX,WAGE,OAFAL,QAAQC,KAAK,6HAEN3C,KAAKyC,QAAQvB,yCAGtB2B,OAAAC,eAAIpD,EAAAqD,UAAA,eAAY,KAAhB,WACE,OAAO/C,KAAKyC,aAGd,SAAiBA,GACfzC,KAAKyC,QAAU,OAAcD,OAAOxC,KAAKyC,QAASA,oCAmFpD/C,EAAAqD,UAAAI,aAAA,WACE,OAA2B,MAAvBnD,KAAKG,SAAS6C,OAOpBtD,EAAAqD,UAAAK,YAAA,SAAYC,EAA+BC,GACzC,QAAItD,KAAKmD,iBAIHnD,KAAKyC,QAAQpB,2BACfrB,KAAKK,aAAaQ,QAChBb,KAAKyC,QAAQpB,0BACbiC,EAAMC,KAKNvD,KAAKD,QAAUC,KAAKyC,QAAQrB,gBAC9BpB,KAAKD,OAAOyD,SAAS,CAACxD,KAAKyC,QAAQrB,kBAG9B,IAYX1B,EAAAqD,UAAAU,gBAAA,SAAgBC,EAA4BC,GAIb,OAF7BD,EAAeb,OAAOL,OAAO,GAAIkB,IAEhBzD,SACfD,KAAKC,SAAS2D,KAAK,OAEnB5D,KAAKC,SAAS2D,KAAK5D,KAAK6D,kBAAkBH,EAAazD,kBAChDyD,EAAazD,UAIkB,MAAtCyD,EAAaI,uBACwB,MAArCJ,EAAaK,uBAEbL,EAAaI,sBAAwBJ,EAAaK,4BAC3CL,EAAaK,sBAGlBJ,IAAmBT,YACrBQ,EAAaC,eAAiBA,OAG1BK,EAAQN,EAAaM,MAM3B,cALON,EAAaM,MACpBN,EAAa1D,KAAKyC,QAAQT,YAAcgC,EAExCN,EAAaO,oBAAsBjE,KAAKyC,QAAQd,wBAEzC3B,KAAKL,KAAKuE,KACflE,KAAKmE,gBAAkBnE,KAAKyC,QAAQhB,oBAAqBiC,IAK7DhE,EAAAqD,UAAAqB,cAAA,WACE,OAAOpE,KAAKL,KAAK0E,UAAoBrE,KAAKmE,gBAAkBnE,KAAKyC,QAAQf,oBAI3EhC,EAAAqD,UAAAuB,OAAA,SAAOC,EAAwBZ,GAA/B,MAAAa,EAAAxE,KACEA,KAAKC,SAAS2D,KAA6B,MAAvBW,EAAWtE,SAAoB,KAAOD,KAAK6D,kBAAkBU,EAAWtE,eAEtFwE,IAAIC,EAAA,IACP1E,KAAKyC,QAAQT,YAAauC,EAAWP,MACtCU,EAAAC,SAAUJ,EAAWI,YAGnBhB,IAAmBT,YACrBuB,EAAKd,eAAiBA,OAGlBiB,EAAS5E,KAAKL,KAAKuE,KACvBlE,KAAKmE,gBAAkBnE,KAAKyC,QAAQtB,WAAYsD,GAChDI,KAAKC,EAAAA,SAIP,OAFAF,EAAOG,UAAU,SAAAC,GAAO,OAAAR,EAAKpE,SAASwD,KAAKoB,EAAIC,QAExCL,GAGTlF,EAAAqD,UAAAmC,YAAA,SAAYC,EAAmBC,OAEvBC,EAAoBrF,KAAKsF,aAAaH,GACtCI,EAAiBvF,KAAKM,OAAOI,SAASE,OAAM,IAAIZ,KAAKyC,QAAQL,kBAC7DC,EAA0BrC,KAAKyC,QAAQJ,gBACvCmD,EAAkBxF,KAAKyF,YAAYJ,EAAWE,EAAalD,EAAiB+C,GAElF,GAAwB,cAApB/C,EAAiC,KAC7BC,EAAqBtC,KAAKyC,QAAQH,mBACpCoD,EAAgB,GAEpB,GAAIpD,EACF,IAAK,IAAMqD,KAAOrD,EACZA,EAAmBsD,eAAeD,KAClCD,GAAiB,IAAIC,EAAG,IAAIrD,EAAmBqD,QAKjDE,EAAQtF,OAAOE,KACjB+E,EACA,SACA,4BAA4BE,GAEhC,OAAO1F,KAAK8F,iCAAiCD,GACxC,GAAwB,eAApBxD,EAET,OADArC,KAAKM,OAAOI,SAASC,KAAO6E,EACrBtC,UAEP,MAAM,IAAI6C,MAAM,gCAAgC1D,EAAe,MAInE3C,EAAAqD,UAAAiD,qBAAA,WACEhG,KAAKiG,yBAIPvG,EAAAqD,UAAAmD,QAAA,WAAA,IAAA1B,EAAAxE,KACE,OAAOA,KAAKL,KAAK0E,UAAoBrE,KAAKmE,gBAAkBnE,KAAKyC,QAAQnB,aAEtEuD,KACCsB,EAAAA,SAAS,WACL3B,EAAKnE,aAAaU,WAAW,eAC7ByD,EAAKnE,aAAaU,WAAW,UAC7ByD,EAAKnE,aAAaU,WAAW,UAC7ByD,EAAKnE,aAAaU,WAAW,aAC7ByD,EAAKnE,aAAaU,WAAW,OAE7ByD,EAAKrE,SAASyD,KAAK,MACnBY,EAAKvE,SAAS2D,KAAK,MACnBY,EAAKpE,SAASwD,KAAK,UAO7BlE,EAAAqD,UAAAqD,cAAA,WAAA,IAAA5B,EAAAxE,KACQ4E,EAAS5E,KAAKL,KAAK0G,IACvBrG,KAAKmE,gBAAkBnE,KAAKyC,QAAQlB,mBACpCsD,KAAKC,EAAAA,SAUP,OARAF,EAAOG,UACL,SAACC,GAAQ,OAAAR,EAAKpE,SAASwD,KAAKoB,EAAIC,OAChC,SAACqB,GACsB,MAAjBA,EAAMC,QAAkB/B,EAAK/B,QAAQjB,uBACvCgD,EAAK0B,YAIJtB,GAITlF,EAAAqD,UAAAyD,eAAA,SAAeC,OAMTC,EAJ+B,MAA/BD,EAAmBxG,UACrBD,KAAKC,SAAS2D,KAAK5D,KAAK6D,kBAAkB4C,EAAmBxG,WAM7DyG,EADwC,MAAtCD,EAAmBE,gBACd,CACLhC,SAAwB8B,EAAmB9B,SAC3Cb,sBAAwB2C,EAAmB1C,sBAGtC,CACL6C,iBAAwBH,EAAmBE,gBAC3ChC,SAAwB8B,EAAmB9B,SAC3Cb,sBAAwB2C,EAAmB1C,sBAI3C0C,EAAmBI,qBACrBH,EAAKI,qBAAuBL,EAAmBI,wBAG3CpC,EAAOiC,EACb,OAAO1G,KAAKL,KAAKoH,IAAiB/G,KAAKmE,gBAAkBnE,KAAKyC,QAAQb,mBAAoB6C,IAI5F/E,EAAAqD,UAAAiE,cAAA,SAAcC,SAEZjH,KAAKC,SAAS2D,KACmB,MAA9BqD,EAAkBhH,SAAoB,KAAOD,KAAK6D,kBAAkBoD,EAAkBhH,eAGnFwE,IAAIC,EAAA,IACP1E,KAAKyC,QAAQT,YAAaiF,EAAkBjD,MAC7CU,EAAAwC,aAAclH,KAAKyC,QAAQX,yBAG7B,OAAO9B,KAAKL,KAAKuE,KAAkBlE,KAAKmE,gBAAkBnE,KAAKyC,QAAQZ,kBAAmB4C,IAUpF/E,EAAAqD,UAAAoE,YAAR,WACE,OAA+B,MAAvBnH,KAAKC,SAAS+C,MAAiB,GAAKhD,KAAKC,SAAS+C,MAAMoE,KAAO,KAGjE1H,EAAAqD,UAAAsE,WAAR,eACMC,EAAkB,GAUtB,OAR4B,MAAxBtH,KAAKyC,QAAQvB,UACfoG,GAAmBtH,KAAKyC,QAAQvB,QAAU,KAGhB,MAAxBlB,KAAKyC,QAAQxB,UACfqG,GAAmBtH,KAAKyC,QAAQxB,QAAU,KAGrCqG,GAGD5H,EAAAqD,UAAAoB,cAAR,WACE,OAAOnE,KAAKqH,aAAerH,KAAKmH,eAG1BzH,EAAAqD,UAAAuC,aAAR,SAAqBH,OACfE,EAQJ,OAJiB,OAFjBA,EAAYrF,KAAKyC,QAAQP,WAAWiD,MAGlCE,EAAY,SAASF,GAGhBE,GAGD3F,EAAAqD,UAAA0C,YAAR,SAAoBJ,EAAmBE,EAAqBgC,EAAoBnC,OAC1E7B,EAWJ,OATAA,EAAWvD,KAAKyC,QAAQR,UAAS,IAAIoD,EACrC9B,GAAQ,yBAAyBgE,EACjChE,GAAQ,oBAAoBiE,mBAAmBjC,GAC/ChC,GAAQ,uBAAuB6B,EAEJ,MAAvBpF,KAAKC,SAAS+C,QAChBO,GAAO,mBAAmBvD,KAAKC,SAAS+C,MAAMC,MAGzCM,GAWD7D,EAAAqD,UAAAH,gBAAR,eAEQ3C,EAAWD,KAAK6D,kBAAkB7D,KAAKK,aAAaS,QAAQ,aAE9Db,GACFD,KAAKC,SAAS2D,KAAK3D,GAGrBD,KAAKyH,yBAEDzH,KAAKF,gBACPE,KAAKiG,yBASFvG,EAAAqD,UAAA2E,2BAAP,SAAkCzC,OAC1B0C,EAAU1C,EAAK0C,QAEfxH,EAAqB,CACzByH,YAAgBD,EAAQtB,IAAI,gBAC5BwB,OAAgBF,EAAQtB,IAAI,UAC5ByB,OAAgBH,EAAQtB,IAAI,UAC5B0B,UAAgBJ,EAAQtB,IAAI,cAC5B2B,IAAgBL,EAAQtB,IAAI,QAG9BrG,KAAKiI,YAAY9H,IAIXT,EAAAqD,UAAAmF,2BAAR,SAAmCjD,OAC3B9E,EAAqB,CACzByH,YAAgB3C,EAAiB,WACjC4C,OAAgB5C,EAAgB,UAChC6C,OAAgB7C,EAAa,OAC7B8C,UAAgB,SAChBC,IAAgB/C,EAAU,KAG5BjF,KAAKiI,YAAY9H,IAIZT,EAAAqD,UAAA0E,uBAAP,eAEQtH,EAAqB,CACzByH,YAAgB5H,KAAKK,aAAaS,QAAQ,eAC1C+G,OAAgB7H,KAAKK,aAAaS,QAAQ,UAC1CgH,OAAgB9H,KAAKK,aAAaS,QAAQ,UAC1CiH,UAAgB/H,KAAKK,aAAaS,QAAQ,aAC1CkH,IAAgBhI,KAAKK,aAAaS,QAAQ,QAGxCd,KAAKmI,cAAchI,IACrBH,KAAKG,SAASyD,KAAKzD,IAKfT,EAAAqD,UAAAkD,sBAAR,WAAA,IAAAzB,EAAAxE,KACEA,KAAKF,eAAesI,YAAYrD,UAAU,SAAAqD,OAClCjI,EAAqB,CACzByH,YAAgBQ,EAAmB,OAAKA,EAAwB,WAChEP,OAAgBO,EAAuB,UACvCN,OAAgBM,EAAoB,OACpCL,UAAgB,SAChBC,IAAgBI,EAAiB,KAG/B5D,EAAK2D,cAAchI,IACrBqE,EAAKrE,SAASyD,KAAKzD,MAYjBT,EAAAqD,UAAAkF,YAAR,SAAoB9H,GACdH,KAAKmI,cAAchI,KAErBH,KAAKG,SAASyD,KAAKzD,GAEnBH,KAAKK,aAAaQ,QAAQ,cAAeV,EAASyH,aAClD5H,KAAKK,aAAaQ,QAAQ,SAAUV,EAAS0H,QAC7C7H,KAAKK,aAAaQ,QAAQ,SAAUV,EAAS2H,QAC7C9H,KAAKK,aAAaQ,QAAQ,YAAaV,EAAS4H,WAChD/H,KAAKK,aAAaQ,QAAQ,MAAOV,EAAS6H,KAEf,MAAvBhI,KAAKC,SAAS+C,OAChBhD,KAAKK,aAAaQ,QAAQ,WAAYb,KAAKC,SAAS+C,MAAMC,QAcxDvD,EAAAqD,UAAAoF,cAAR,SAAsBhI,GAEpB,OAC0B,MAAxBA,EAASyH,aACU,MAAnBzH,EAAS0H,QACU,MAAnB1H,EAAS2H,QACa,MAAtB3H,EAAS4H,WACO,MAAhB5H,EAAS6H,MAEkB,MAAvBhI,KAAKG,SAAS6C,OACT7C,EAAS2H,QAAU9H,KAAKG,SAAS6C,MAAM8E,SAc5CpI,EAAAqD,UAAA+C,iCAAR,SAAyCuC,OACjCC,EAAeC,EAAAA,SAAS,KAExBC,EAAiBC,EAAAA,UAAUzI,KAAKM,OAAQ,WAAWuE,KACvD6D,EAAAA,MAAM,QACNC,EAAAA,OAAO3I,KAAK4I,4BAGdJ,EAAezD,UACb/E,KAAKkI,2BAA2BW,KAAK7I,WAGjC8I,EAAqBR,EAAavD,UAAU,WAC5CsD,EAAWU,OACbD,EAAmBE,cAEnBX,EAAWY,YAAY,qBAAsB,OAIjD,OAAOT,GAGD9I,EAAAqD,UAAA6F,0BAAR,SAAkC3D,GAChC,GAAqB,uBAAjBA,EAAKiE,SAAqD,gBAAjBjE,EAAKiE,QAChD,OAAOjE,GAYHvF,EAAAqD,UAAAc,kBAAR,SAA0BZ,GACxB,OAAY,MAARA,GAA0C,MAA1BjD,KAAKyC,QAAQV,UACxB,KAGF/B,KAAKyC,QAAQV,UAAUoH,KAC5B,SAAAlJ,GAAY,OAAAA,EAASgD,OAASA,yBAhkBnCmG,EAAAA,WAAU1C,KAAA,CAAC,CACV2C,WAAY,oDAvBLC,EAAAA,8CAmEJC,EAAAA,OAAM7C,KAAA,CAAClH,YACiCqD,OAAM2G,WAAA,CAAA,CAAAC,KAA9CF,EAAAA,OAAM7C,KAAA,CAACgD,EAAAA,sBArEHC,EAAAA,eAAcH,WAAA,CAAA,CAAAC,KAsElBG,EAAAA,kBAtEoBC,EAAAA,OAAML,WAAA,CAAA,CAAAC,KAuE1BG,EAAAA,iOAxEL,GCAAE,EAAA,WAWE,SAAAA,EAAqBC,GAAA/J,KAAA+J,aAAAA,EAyCvB,OAvCED,EAAA/G,UAAAiH,UAAA,SAAUC,EAAuBrG,GAAjC,IAAAY,EAAAxE,KAGEA,KAAK+J,aAAatC,6BAGZtH,EAAWH,KAAK+J,aAAa5J,SAAS6C,MAE5C,GAAI7C,IAC0C,OAA3CH,KAAK+J,aAAaG,aAAahJ,SAAoB+I,EAAI1G,IAAI4G,MAAMnK,KAAK+J,aAAaG,aAAahJ,UAAW,KAEtGyG,EAAU,CACdyC,eAAgBjK,EAASyH,YACzBC,OAAgB1H,EAAS0H,OACzBC,OAAgB3H,EAAS2H,OACzBuC,aAAgBlK,EAAS4H,UACzBC,IAAgB7H,EAAS6H,KAG3BiC,EAAMA,EAAIK,MAAM,CACdC,WAAY5C,IAIhB,OAAO/D,EAAK4G,OAAOP,GAAKpF,KAAK4F,EAAAA,IACzB,SAAAzF,GAAO,OAAAR,EAAKkG,eAAe1F,IAC3B,SAAA2F,GAAO,OAAAnG,EAAKkG,eAAeC,OAMzBb,EAAA/G,UAAA2H,eAAR,SAAuB1F,IACjBA,aAAe4F,EAAAA,cAAgB5F,aAAe6F,EAAAA,qBACD,OAA3C7K,KAAK+J,aAAaG,aAAahJ,SAAqB8D,EAAIzB,KAAOyB,EAAIzB,IAAI4G,MAAMnK,KAAK+J,aAAaG,aAAahJ,WAC9GlB,KAAK+J,aAAarC,2BAA2B1C,wBAxCpDoE,EAAAA,sDALQ1J,KAiDToK,EApDA,GCAAgB,EAAA,WAaE,SAAAA,EAAoCC,GAClC,GAAIA,EACF,MAAM,IAAIhF,MAAM,iGAqBtB,OAlBS+E,EAAAE,QAAP,SAAevI,GACb,MAAO,CACLwI,SAAUH,EACVI,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,SAAUvB,EACVwB,OAAO,GAET7I,EAAQ8I,6BACR,CACEJ,QAAS3L,EACTgM,SAAU/I,GAEZ/C,yBAtBP+L,EAAAA,oDAGmDX,EAAkBtB,WAAA,CAAA,CAAAC,KAAvDG,EAAAA,UAAQ,CAAAH,KAAIiC,EAAAA,cAuB3BZ,EApCA","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { HttpClient, HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval, BehaviorSubject } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n  ApiResponse,\n\n  AngularTokenOptions\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType.value != null) {\n      return this.userType.value.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData.value;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData.value;\n  }\n\n  get apiBase(): string {\n    console.warn('[angular-token] The attribute .apiBase will be removed in the next major release, please use' +\n    '.tokenOptions.apiBase instead');\n    return this.options.apiBase;\n  }\n\n  get tokenOptions(): AngularTokenOptions {\n    return this.options;\n  }\n\n  set tokenOptions(options: AngularTokenOptions) {\n    this.options = (<any>Object).assign(this.options, options);\n  }\n\n  private options: AngularTokenOptions;\n  public userType: BehaviorSubject<UserType> = new BehaviorSubject<UserType>(null);\n  public authData: BehaviorSubject<AuthData> = new BehaviorSubject<AuthData>(null);\n  public userData: BehaviorSubject<UserData> = new BehaviorSubject<UserData>(null);\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(this.platformId)) {\n\n      // Bad pratice, needs fixing\n      this.global = {\n        open: (): void => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      // Bad pratice, needs fixing\n      this.localStorage.setItem = (): void => null;\n      this.localStorage.getItem = (): void => null;\n      this.localStorage.removeItem = (): void => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  userSignedIn(): boolean {\n    if (this.authData.value == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData, additionalData?: any): Observable<ApiResponse> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType.next(null);\n    } else {\n      this.userType.next(this.getUserTypeByName(registerData.userType));\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    if (additionalData !== undefined) {\n      registerData.additionalData = additionalData;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.registerAccountPath, registerData\n    );\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData, additionalData?: any): Observable<ApiResponse> {\n    this.userType.next((signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType));\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    if (additionalData !== undefined) {\n      body.additionalData = additionalData;\n    }\n\n    const observ = this.http.post<ApiResponse>(\n      this.getServerPath() + this.options.signInPath, body\n    ).pipe(share());\n\n    observ.subscribe(res => this.userData.next(res.data));\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string, registration_token?: string) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(oAuthPath, callbackUrl, oAuthWindowType, registration_token);\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n      return undefined;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<ApiResponse> {\n    return this.http.delete<ApiResponse>(this.getServerPath() + this.options.signOutPath)\n      // Only remove the localStorage and clear the data after the call\n      .pipe(\n        finalize(() => {\n            this.localStorage.removeItem('accessToken');\n            this.localStorage.removeItem('client');\n            this.localStorage.removeItem('expiry');\n            this.localStorage.removeItem('tokenType');\n            this.localStorage.removeItem('uid');\n\n            this.authData.next(null);\n            this.userType.next(null);\n            this.userData.next(null);\n          }\n        )\n      );\n  }\n\n  // Validate token request\n  validateToken(): Observable<ApiResponse> {\n    const observ = this.http.get<ApiResponse>(\n      this.getServerPath() + this.options.validateTokenPath\n    ).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData.next(res.data),\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<ApiResponse> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType.next(this.getUserTypeByName(updatePasswordData.userType));\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put<ApiResponse>(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<ApiResponse> {\n\n    this.userType.next(\n      (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType)\n    );\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post<ApiResponse>(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType.value == null) ? '' : this.userType.value.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string, callbackUrl: string, windowType: string, registration_token?: string): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n    url +=  `&registration_token=${registration_token}`;\n\n    if (this.userType.value != null) {\n      url += `&resource_class=${this.userType.value.name}`;\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType.next(userType);\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: HttpResponse<any> | HttpErrorResponse): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData.next(authData);\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData.next(authData);\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData.next(authData);\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType.value != null) {\n        this.localStorage.setItem('userType', this.userType.value.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData.value != null) {\n        return authData.expiry >= this.authData.value.expiry;\n      }\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials' || data.message === 'authFailure') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n\n  constructor( private tokenService: AngularTokenService ) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    const authData = this.tokenService.authData.value;\n\n    if (authData &&\n      (this.tokenService.tokenOptions.apiBase === null || req.url.match(this.tokenService.tokenOptions.apiBase))) {\n\n      const headers = {\n        'access-token': authData.accessToken,\n        'client':       authData.client,\n        'expiry':       authData.expiry,\n        'token-type':   authData.tokenType,\n        'uid':          authData.uid\n      };\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: HttpResponse<any> | HttpErrorResponse | HttpEvent<any>): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.tokenOptions.apiBase === null || (res.url && res.url.match(this.tokenService.tokenOptions.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}